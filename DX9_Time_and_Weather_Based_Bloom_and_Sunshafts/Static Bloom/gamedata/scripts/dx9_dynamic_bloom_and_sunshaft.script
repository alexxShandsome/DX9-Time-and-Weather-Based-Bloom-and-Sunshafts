-- current changes from the last update
-- * optimized the script
-- * moved time of sunshaft in cloudy days to 18PM
-- * add kinda smooth bloom transition depending on the time
-- * add slight bloom setting for dusk and dawn (still depends on the type of weather)

-- locked values for safety reasons
local LS_BLOOM_FAST_OFF = "r2_ls_bloom_fast off"
local DEFAULT_LS_BLOOM_KERNEL_G = "r2_ls_bloom_kernel_g 7"

-- default settings (minimum)
local SUNSHAFTS_OFF = "r2_sunshafts_mode off"
local DEFAULT_LS_BLOOM_THRESHOLD = "r2_ls_bloom_threshold 1"
local	DEFAULT_LS_BLOOM_KERNEL_SCALE = "r2_ls_bloom_kernel_scale 0.7"

-- bright weather settings
local SUNSHAFTS_SCREEN_SPACE = "r2_sunshafts_mode screen_space"
local BRIGHT_WEATHER_LS_BLOOM_THRESHOLD = "r2_ls_bloom_threshold 0"
local BRIGHT_WEATHER_LS_BLOOM_KERNEL_SCALE = "r2_ls_bloom_kernel_scale 0.8"

-- slight weather settings
local SLIGHT_BRIGHT_WEATHER_LS_BLOOM_KERNEL_SCALE = "r2_ls_bloom_kernel_scale 0.75"
local SLIGHT_SLIGHTLY_BRIGHT_WEATHER_LS_BLOOM_KERNEL_SCALE = "r2_ls_bloom_kernel_scale 0.65"

function on_game_start()
	RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
	RegisterScriptCallback("actor_on_update", actor_on_update)
	RegisterScriptCallback("actor_on_sleep", actor_on_sleep)
	-- RegisterScriptCallback("on_key_release", on_key_release)
end

local FIRST_LEVEL_WEATHER = nil
-- function responsible for getting the first level weather
-- so that when the weather shift while inside a map the effects will stay until quick save and quick load or map change
-- uncomment this whole function if you are playing the weather editor
function actor_on_first_update()
	-- Emission and Psi Storm weather are blacklisted as a first level weather
	if is_blacklisted_weather() then
		FIRST_LEVEL_WEATHER = nil
	else
		FIRST_LEVEL_WEATHER = get_current_weather_file()
	end
end

function actor_on_update()
	-- These values are locked for safety reasons --
	get_console():execute(LS_BLOOM_FAST_OFF)
	get_console():execute(DEFAULT_LS_BLOOM_KERNEL_G)
	-- These values are locked for safety reasons --

	-- Set default values --
	get_console():execute(SUNSHAFTS_OFF)
	get_console():execute(DEFAULT_LS_BLOOM_THRESHOLD)
	get_console():execute(DEFAULT_LS_BLOOM_KERNEL_SCALE)
	-- Set default values --

	-- Emissions and Psi storm can have a bloom but not a sunshaft --
	if is_blacklisted_weather() then
		get_console():execute(BRIGHT_WEATHER_LS_BLOOM_THRESHOLD)
		get_console():execute(DEFAULT_LS_BLOOM_KERNEL_SCALE)
	end
	-- Emissions and Psi storm can have a bloom but not a sunshaft --

	local time_hour = level.get_time_hours()

	-- Sunshaft section --
	if time_hour >= 6 and time_hour <= 20 then
		generate_sunshafts()
	end
	if time_hour >= 17 and time_hour <= 20 and is_cloudy_weather() then
		get_console():execute(SUNSHAFTS_SCREEN_SPACE)
		get_console():execute(SLIGHT_SLIGHTLY_BRIGHT_WEATHER_LS_BLOOM_KERNEL_SCALE)
	end
	-- Sunshaft section --

	-- Bloom section --
	if time_hour >= 7 and time_hour <= 17 then
		generate_bloom()
	end
	if time_hour == 6 or time_hour >= 18 and time_hour <= 20 then
		generate_slight_bloom()
	end
	-- Bloom section --
end

function generate_bloom()
	if is_blacklisted_weather() then
		return
	end

	if is_bright_weather() then
		get_console():execute(BRIGHT_WEATHER_LS_BLOOM_THRESHOLD)
		get_console():execute(BRIGHT_WEATHER_LS_BLOOM_KERNEL_SCALE)
	end
	if is_slightly_bright_weather() then
		get_console():execute(BRIGHT_WEATHER_LS_BLOOM_THRESHOLD)
		get_console():execute(DEFAULT_LS_BLOOM_KERNEL_SCALE)
	end
end

function generate_slight_bloom()
	if is_blacklisted_weather() then
		return
	end

	if is_bright_weather() then
		get_console():execute(BRIGHT_WEATHER_LS_BLOOM_THRESHOLD)
		get_console():execute(SLIGHT_BRIGHT_WEATHER_LS_BLOOM_KERNEL_SCALE)
	end
	if is_slightly_bright_weather() then
		get_console():execute(BRIGHT_WEATHER_LS_BLOOM_THRESHOLD)
		get_console():execute(SLIGHT_SLIGHTLY_BRIGHT_WEATHER_LS_BLOOM_KERNEL_SCALE)
	end
end

function generate_sunshafts()
	if is_blacklisted_weather() then
		return
	end

	if is_bright_weather() or is_slightly_bright_weather() then
		get_console():execute(SUNSHAFTS_SCREEN_SPACE)
	end
end

-- ask if a weather file is bright
function is_bright_weather()
	local weather = get_current_weather_file()
	if FIRST_LEVEL_WEATHER ~= nil then
		weather = FIRST_LEVEL_WEATHER
	end

	-- Bright weather files
	if weather == "w_clear1" or weather == "w_clear2" or
		weather == "w_partly1" or weather == "[default]" then
		return true
	end
	return false
end

-- ask if a weather file is slightly bright
function is_slightly_bright_weather()
	local weather = get_current_weather_file()
	if FIRST_LEVEL_WEATHER ~= nil then
		weather = FIRST_LEVEL_WEATHER
	end

	-- Slight bright weather files
	if weather == "w_foggy2" or weather == "w_foggy1" or 
		weather == "w_rain1" or weather == "w_partly2" then
		return true
	end
	return false
end

-- ask if a weather file is cloudy
function is_cloudy_weather()
	local weather = get_current_weather_file()
	if FIRST_LEVEL_WEATHER ~= nil then
		weather = FIRST_LEVEL_WEATHER
	end

	if weather == "w_cloudy1" or weather == "w_cloudy2_dark" then
		return true
	end
	return false
end

-- emission and psi storm weather files are blacklisted because they are just weather effects
function is_blacklisted_weather()
	local weather = get_current_weather_file()
	if weather == "fx_blowout_day" or weather == "fx_blowout_night" or 
		weather == "fx_psi_storm_day" or weather == "fx_psi_storm_night" then
		return true
	end
	return false
end

-- reset FIRST_LEVEL_WEATHER after sleep
function actor_on_sleep()
	local weather = get_current_weather_file()
	if FIRST_LEVEL_WEATHER ~= weather then
		FIRST_LEVEL_WEATHER = weather
	end
end

function get_current_weather_file()
	return level.get_weather()
end

-- for debugging purposes
-- function on_key_release(key)
--    -- press "9" to show these debug logs
--    if key == DIK_keys["DIK_9"] then
--       utils_data.debug_write("----- dx9_dynamic_bloom_and_sunshaft.script debug section -----")
--       utils_data.debug_write("get_current_weather_file() " .. get_current_weather_file())
--       printf("FIRST_LEVEL_WEATHER %s", FIRST_LEVEL_WEATHER)
--
--       if is_bright_weather() then
--          utils_data.debug_write("is_bright_weather() is TRUE")
--       else
--          utils_data.debug_write("is_bright_weather() is FALSE")
--       end
--
--       if is_slightly_bright_weather() then
--          utils_data.debug_write("is_slightly_bright_weather() is TRUE")
--       else
--          utils_data.debug_write("is_slightly_bright_weather() is FALSE")
--       end
--
--       if is_blacklisted_weather() then
--          utils_data.debug_write("is_blacklisted_weather() is TRUE")
--       else
--          utils_data.debug_write("is_blacklisted_weather() is FALSE")
--       end
--    end
-- end
